# Container image tag for adaptor and payment provider, required
version: latest

aws:
  # Access key ID for your AWS IAM user, required
  accessKeyId:
  # Secret access key for your AWS IAM user, required and sensitive
  secretAccessKey:
  # AWS region, required
  region: us-west-2

database:
  # PostgreSQL database hostname, required
  host: 
  # PostgreSQL database port
  port: 5432
  # PostgreSQL database user, required
  user: 
  # PostgreSQL database password, required and sensitive
  password: 
  # PostgreSQL database name, required
  databaseName: 

# Connection information for Redis
redis:
  # Redis hostname, if Redis is deployed in cluster using 
  # the Redis helm chart this should be set to redis-master.default.svc.cluster.local, required
  host: 
  # Redis port
  port: 6379
  # Redis user
  user: redis
  # Redis password, required and sensitive
  password: 

  tls:
    # Whether to enable TLS for Redis, required if your Redis instance requires TLS
    enabled: false
    # CA certificate for Redis TLS, required if your Redis instance requires TLS
    ca: 
    # Client certificate for Redis TLS, required if your Redis instance requires client certs
    cert: 
    # Client key for Redis TLS, required if your Redis instance requires client certs, sensitive
    key: 
    # Optional passphrase for encrypting the Redis client key, sensitive
    passphrase: 

attestation:
  # Remote attestation hostname, for non prod you can use
  # the QA endpoint set here, for production you will
  # be provided with a URL specifically for you, required
  host: https://kernelserver.qa.haloplus.io

keys:
  # Secrets manager secret name for DB integrity secret
  dbIntegrity: haloDbIntegrity
  # Secrets manager secret name for DB encryption secret
  dbEncryptionKey: haloDbEncryption
  # Secrets manager secret name for transaction signing secret
  transactionSigning: haloTransactionSigning
  # KMS CMK used to encrypt the Secrets manager secrets
  cmk: haloCmk

adaptor:
  # K8s namespace to deploy the adaptor into
  namespace: halo
  # Name of the adaptor deployment and service
  name: adaptor
  # Replica count of the adaptor, you should probably set this to your at least your node count
  replicaCount: 1
  # Readiness probe settings for adaptor, the adaptor readiness probe checks that the service is up, 
  # as well as checking that the A&M server is up and reachable
  readinessProbe:
    # Enable the readiness probe, you might want to disable this if you are testing without 
    # access to the A&M server
    enabled: true
    # How often to run the readiness probe
    periodSeconds: 30
  image:
    # Image repository for the adaptor image, required
    repository:
    # Tag for the adaptor image, this overrides the version setting
    tag:
    pullPolicy: Always
  service:
    # Port the adaptor listens on
    targetPort: 9000
    # Port that the adaptor service exposes, if HTTPS is enabled, this should be set to 443
    listeningPort: 80
  # Logging level for the adaptor. Choices are LogDebug, LogInfo, LogWarn and LogError
  # LogDebug provides full logging, including requests, responses and all card details
  # LogInfo provides some logging, useful for investigating the state of the system without leaking card data
  # Should be set to LogInfo in production and LogDebug in nonprod
  logLevel: LogInfo
  # JSON formatted logs, should be set to true when using logging tooling such as Grafana Loki or ELK.
  # Can be useful to turn off when testing locally
  jsonLogs: true
  # Resource limits and requests, these values can be tuned based on your volumes, it is recommended to set
  # memory limits and requests to the same value
  resources:
    limits:
      cpu: 500m
      memory: 1G
    requests:
      cpu: 100m
      memory: 1G
  tls:
    # Whether to enable TLS on the adaptor
    enabled: false
    # The TLS server certificate
    cert: |
      -----BEGIN CERTIFICATE-----
      <cert data>
      -----END CERTIFICATE-----
    # The TLS server key, sensitive
    key: |
      -----BEGIN PRIVATE KEY-----
      <key data>
      -----END PRIVATE KEY-----
    # The TLS server CA
    ca: |
      -----BEGIN CERTIFICATE-----
      <ca data>
      -----END CERTIFICATE-----
    # Optional passphrase for encrypting the TLS key, sensitive
    passphrase:
    
  # HS256 Secret used for issuing tokens for admin users, if not set a random value will be generated
  jwtSigningSecret:

  # If HSM service is not enabled, this is the hostname name of the implementation of the HSM service to use, format is `http(s)://<hostname>:<port>`
  hsmServiceUrl:

scheduledJobs:
  # Job for voiding failed transaction
  voids:
    # Sets whether voiding failed transactions should run
    enabled: true
    # How often the void job should run
    cron: "*/30 * * * *"
    # How often many times a failed transaction should try be voided before giving up
    maxRetries: 10
    # Whether the void job should run when the adaptor starts up
    runAtStartup: false

paymentProvider:
  # Name of the paymentprovider deployment and service
  name: paymentprovider
  # Replica count of the payment provider, should probably be set to at least node count
  replicaCount: 1
  readinessProbe:
    # Enables the readiness probe for the payment provider
    enabled: true
    # The frequency of readiness probes
    periodSeconds: 30
  service:
    # The port the paymentprovider listens on, this will be provided along with the config for the paymentprovider
    targetPort: 
    # kThe port the paymentprovider service exposes
    listeningPort: 80
  image:
    # Image repository for the paymentprovider image
    repository:
    # Tag for the paymentprovider image, this overrides the version setting
    tag:
    pullPolicy: Always
  # Resource limits and requests, these values can be tuned based on your volumes, it is recommended to set
  # memory limits and requests to the same value
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 256Mi
  # Config for the paymentprovider, this is specific per payment provider and will be provided, required
  # Format will be `HALO_<PAYMENT_PROVIDER_NAME>_<CONFIG_KEY>: <CONFIG_VALUE>`
  config:
    env:
    
    file:
      - name: CONFIG_FILE
        path: /etc/paymentprovider/config.json
        content: 

  secrets:
    env:
      
    file:
    

binService:
  # Whether to enable the BIN service, this may be required by your payment provider
  enabled: false
  # Name of the BIN service deployment and service
  name: binservice
  image:
    # Image repository for the BIN service image, required
    repository:
    # Tag for the BIN service image, this overrides the version setting
    tag:
    pullPolicy: Always
  service:
    # The port the BIN service listens on, this will be provided along with the config for the BIN service
    targetPort: 7011
    # The port the BIN service exposes, if TLS is enabled this should be set to 443
    listeningPort: 80
  readinessProbe:
    # Enables the readiness probe for the BIN service
    enabled: true
    # The frequency of readiness probes
    periodSeconds: 30
  # Resource limits and requests, these values can be tuned based on your volumes, it is recommended to set
  # memory limits and requests to the same value
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
hsmService:
  # Whether to enable the HSM service, this is required for PIN and card data encryption
  enabled: true
  # Name of the HSM service deployment and service
  name: hsmservice
  image:
    # Image repository for the HSM service image, required
    repository:
    # Tag for the HSM service image, this overrides the version setting
    tag:
    pullPolicy: Always
  service:
    # The port the HSM service listens on, this will be provided along with the config for the HSM service
    targetPort: 3000
    # The port the HSM service exposes, if TLS is enabled this should be set to 443
    listeningPort: 80
  readinessProbe:
    # Enables the readiness probe for the HSM service
    enabled: true
    # The frequency of readiness probes
    periodSeconds: 30
  # Resource limits and requests, these values can be tuned based on your volumes, it is recommended to set
  # memory limits and requests to the same value
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 256Mi
      
  hsm:
    # Whether to enable mutual TLS with the HSM, this is required for secure communication with the HSM
    enableMTls: true
    # The IP address of the HSM, required
    ip:
    # The port the HSM listens on, required
    port:
    # The LMK ID for the HSM
    lmkId: 
    # The name of the HSM
    name: HSM
    # The CA certificate for TLS with HSM
    ca: |
      -----BEGIN CERTIFICATE-----
      <ca data>
      -----END CERTIFICATE-----
    # The client certificate for the HSM
    cert: | 
      -----BEGIN CERTIFICATE-----
      <cert data>
      -----END CERTIFICATE-----
    # The client key for the HSM
    key: | 
      -----BEGIN PRIVATE KEY-----
      <key data>
      -----END PRIVATE KEY-----
    
  tls:
    # Whether to enable TLS on the HSM service, this is required for secure communication with the HSM service if a service mesh is not used
    enabled: true
    # CA certificate for TLS for the HSM service
    ca: |
      -----BEGIN CERTIFICATE-----
      <ca data>
      -----END CERTIFICATE-----
    # Server certificate for TLS for the HSM service
    cert: | 
      -----BEGIN CERTIFICATE-----
      <cert data>
      -----END CERTIFICATE-----
    # Server key for TLS for the HSM service, sensitive
    key: | 
      -----BEGIN PRIVATE KEY-----
      <key data>
      -----END PRIVATE KEY-----
  # Setting to disable masking PCI sensitive data in logs, this should be set to true in production. Useful for debugging in nonprod
  maskPciSensitiveData: true
  # Setting to choose the key type for destination PIN keys, options are BDK or ZMK
  destinationPinKeyType: BDK
  # Value of the destination PIN key generated on the HSM. 
  destinationPinKey:
  # Setting to choose the key type for destination data keys, options are BDK or ZMK
  destinationDataKeyType: BDK
  # Value of the destination card data encryption key generated on the HSM, sensitive
  destinationDataKey:
  # Value of the HSM BDK key used to derive PIN keys injected into the SDK, sensitive
  # This key must be an AES 128 BDK.
  rkiKey:
  # The API key for the HSM service, this is used to authenticate requests to the HSM service. 
  # If this is not set, a random value will be generated, sensitive
  apiKey:

imageCredentials:
  # Enables using private registries with authentication
  enabled: false
  # Sets the URL for the private registry to login to
  registry: quay.io
  # Sets the username for logging into the private registry
  username: someone
  # Sets the password for logging into the private registry, sensitive
  password: sillyness
  # Sets the email address for logging into the private registry
  email: someone@host.com

openTelemetry:
  # Opentelemetry metrics endpoint
  metricsEndpoint: "http://otel-collector:4317/v1/metrics"
  # Opentelemetry traces endpoint
  tracesEndpoint: "http://otel-collector:4317/v1/traces"
